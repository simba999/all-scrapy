import scrapy
import json
import os
from scrapy.spiders import Spider
from scrapy.http import FormRequest
from scrapy.http import Request
from chainxy.items import ChainItem
from lxml import etree
from selenium import webdriver
from lxml import html
import usaddress
import pdb
import tokenize
import token
from StringIO import StringIO

class fultonfinancial(scrapy.Spider):
	name = 'fultonfinancial'
	domain = ''
	history = []

	def __init__(self):
		script_dir = os.path.dirname(__file__)
		file_path = script_dir + '/geo/US_Cities.json'
		with open(file_path) as data_file:    
			self.location_list = json.load(data_file)

		file_path = script_dir + '/geo/US_States.json'
		with open(file_path) as data_file:
			self.state_list = json.load(data_file)

	def start_requests(self):
		init_url = 'http://locations.fult.com/'
		header = {
			"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
			"Accept-Encoding":"gzip, deflate",
			"Content-Type":"application/x-www-form-urlencoded"
		}
		for location in self.location_list:
			formdata = {
				"tbCity":location['city'],
				"ddState":self.getState(location['state'], self.state_list),
				"txtZip":'',
				"ddRadius":"20",
				"btbGetZips":"Search",
				"__VIEWSTATEGENERATOR":"CA0B0334",
				"__EVENTVALIDATION":"/wEdAA4fC7Z6WoCNqIbz4YmjwvTwq35qZMbaIVF3xrHN6flGNqao2bLSR+qals4gOttRS9mCJiZhqph59yt0RaIclYwevFEAhQ8JYEI1tOy9r5M2CLHp1NFXlc72kxkb6brsB75tTnm6w0sHh6MK+42Sia7Ncc4szEP+IQOszBwGLLBS+8Mc5rNENOxuAjWq6507F3ljd6s3pTADRMnX9qPei/1YCFN7wsHk06T93CK8RRl0smNbysreGpxSNNz7JAwHQjsr3lQ0UZzzaW2w/Slo/ANYwySc5HpaiDnH01Pws5saK+BJw+m/FLQ2j/uR/2+DyK6GAvt3H9ilE0VZfHwbfDo5",
				"__VIEWSTATE":""
			}
			yield scrapy.FormRequest(url=init_url, headers=header, formdata=formdata, method='post', callback=self.body) 

	def body(self, response):
		print("=========  Checking.......")
		with open('response.html', 'wb') as f:
			f.write(response.body)
		try:
			store_list = response.xpath('//table[@class="dataTable"]//tbody//table/tr[1]')
			for store in store_list:
				detail = self.eliminate_space(store.xpath('./td[2]/text()').extract())
				item = ChainItem()
				item['store_name'] = self.validate(store.xpath('./td[2]/b/text()').extract_first())
				item['phone_number'] = ''
				address = ''
				for de in detail:
					if 'Phone:' in de:
						item['phone_number'] = self.validate(de.split('Phone:')[1])
						break
					else:
						address += de + ', '	
				item['address'] = ''
				item['city'] = ''
				addr = usaddress.parse(address)
				for temp in addr:
					if temp[1] == 'PlaceName':
						item['city'] += temp[0].replace(',','')	+ ' '
					elif temp[1] == 'StateName':
						item['state'] = temp[0]
					elif temp[1] == 'ZipCode':
						item['zip_code'] = temp[0].replace(',','')
					else:
						item['address'] += temp[0].replace(',', '') + ' '
				item['country'] = 'United States'
				h_temp = ''
				hour_list = store.xpath('.//td[4]//tr')
				for hour in hour_list:
					if self.validate(hour.xpath('.//td[1]/text()').extract_first()) != '':
						h_temp += self.validate(hour.xpath('.//td[1]/text()').extract_first()) + ' ' + self.validate(hour.xpath('.//td[2]/text()').extract_first()) + ', '
				item['store_hours'] = h_temp[:-2]
				if item['store_name']+item['phone_number'] not in self.history and item['store_name']+item['phone_number'] != '':
					self.history.append(item['store_name']+item['phone_number'])
					yield item			
		except:
			pdb.set_trace()

	def getState(self, key, items):
		for item in items:
			if key in item['name']:
				return item['abbreviation']
		return ''


	def validate(self, item):
		try:
			return item.strip().replace(';','')
		except:
			return ''

	def eliminate_space(self, items):
		tmp = []
		for item in items:
			if self.validate(item) != '':
				tmp.append(self.validate(item))
		return tmp

	def format(self, item):
		try:
			return unicodedata.normalize('NFKD', item).encode('ascii','ignore').strip()
		except:
			return ''

	def fixLazyJson (self, in_text):
		tokengen = tokenize.generate_tokens(StringIO(in_text).readline)
		result = []
		for tokid, tokval, _, _, _ in tokengen:
			if (tokid == token.NAME):
				if tokval not in ['true', 'false', 'null', '-Infinity', 'Infinity', 'NaN']:
					tokid = token.STRING
					tokval = u'"%s"' % tokval
			elif (tokid == token.STRING):
				if tokval.startswith ("'"):
					tokval = u'"%s"' % tokval[1:-1].replace ('"', '\\"')
			elif (tokid == token.OP) and ((tokval == '}') or (tokval == ']')):
				if (len(result) > 0) and (result[-1][1] == ','):
					result.pop()			
			elif (tokid == token.STRING):
				if tokval.startswith ("'"):
					tokval = u'"%s"' % tokval[1:-1].replace ('"', '\\"')
			result.append((tokid, tokval))

		return tokenize.untokenize(result)
